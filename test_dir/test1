{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMZt7DhPlPVtpMZOqq9dBIM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/1391467751/google_cloud_test/blob/main/test_dir/test1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7WQ_ua6acWxr",
        "outputId": "ed12b76f-bbcb-404a-c9d6-bffda27d3324",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "!pip install  pymysql jqdatasdk"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pymysql in /usr/local/lib/python3.6/dist-packages (0.10.1)\n",
            "Requirement already satisfied: jqdatasdk in /usr/local/lib/python3.6/dist-packages (1.8.1)\n",
            "Requirement already satisfied: pandas<=0.25.3,>=0.16.2 in /usr/local/lib/python3.6/dist-packages (from jqdatasdk) (0.25.3)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from jqdatasdk) (2.23.0)\n",
            "Requirement already satisfied: thriftpy2>=0.3.9 in /usr/local/lib/python3.6/dist-packages (from jqdatasdk) (0.4.12)\n",
            "Requirement already satisfied: msgpack>=0.4.7 in /usr/local/lib/python3.6/dist-packages (from jqdatasdk) (1.0.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from jqdatasdk) (1.15.0)\n",
            "Requirement already satisfied: numpy>=1.9.2 in /usr/local/lib/python3.6/dist-packages (from jqdatasdk) (1.18.5)\n",
            "Requirement already satisfied: SQLAlchemy>=1.2.8 in /usr/local/lib/python3.6/dist-packages (from jqdatasdk) (1.3.20)\n",
            "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.6/dist-packages (from pandas<=0.25.3,>=0.16.2->jqdatasdk) (2.8.1)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas<=0.25.3,>=0.16.2->jqdatasdk) (2018.9)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->jqdatasdk) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->jqdatasdk) (2020.6.20)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->jqdatasdk) (2.10)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->jqdatasdk) (3.0.4)\n",
            "Requirement already satisfied: ply<4.0,>=3.4 in /usr/local/lib/python3.6/dist-packages (from thriftpy2>=0.3.9->jqdatasdk) (3.11)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ICVkuSDhcrlK",
        "cellView": "code",
        "outputId": "a3579e69-1ec5-4170-f2b9-bb3e4e0f0f9e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "import pymysql\n",
        "import jqdatasdk"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "提示：当前环境pandas版本为0.25，get_price与get_fundamentals_continuously接口panel参数将固定为False\n",
            "注意：0.25以上版本pandas不支持panel，如使用该数据结构和相关函数请注意修改\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "abeJXeemiKbM",
        "outputId": "3605ddfe-d790-4cff-fa32-03ad0ec29881",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "'''\n",
        "conn = pymysql.connect(host=\"cdb-mqzvz536.bj.tencentcdb.com\",port =10146,user=\"visitor\",password=\"visitor\")\n",
        "cursor=conn.cursor()\n",
        "cursor.execute(\"use stock_data;\")\n",
        "cursor.execute(\"create table if not exists stock_test (idx int, value float)\")\n",
        "cursor.execute(\"show tables;\")\n",
        "print(cursor.fetchall())\n",
        "cursor.execute(\"show tables like 'stock_test'\")\n",
        "print(cursor.fetchall())\n",
        "cursor.execute(\"show tables like 'play_test'\")\n",
        "print(cursor.fetchall())\n",
        "'''"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(('stock_test',),)\n",
            "(('stock_test',),)\n",
            "()\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_y1o2DUKdCUP",
        "cellView": "code"
      },
      "source": [
        "class my_data:\n",
        "  def __init__(self):\n",
        "    \"\"\"create a class for tencent mysql cloud\"\"\"\n",
        "    self.conn = None\n",
        "    self.cursor =None \n",
        "    pass\n",
        "  \n",
        "  def __del__(self):\n",
        "    self.conn.close()\n",
        "\n",
        "  def init(self,host=\"cdb-mqzvz536.bj.tencentcdb.com\",port=10146,user='visitor',password='visitor'):\n",
        "    self.conn = pymysql.connect(host=host,port =port,user=user,password=password)\n",
        "    self.cursor=self.conn.cursor()\n",
        "    self.cursor.execute(\"use stock_data;\")\n",
        "  \n",
        "  def has_table(self,table_name):\n",
        "    self.cursor.execute(\"show tables like '{}'\".format(table_name))\n",
        "    return len(self.cursor.fetchall())\n",
        "\n",
        "  def create_table(self,table_name,structs):\n",
        "    self.cursor.execute(\"create table {} ({})\".format(table_name,structs))\n",
        "  \n",
        "  def exec(self,command):\n",
        "    if(type(command)==list):\n",
        "      self.cursor.executemany(command)\n",
        "    else:\n",
        "      self.cursor.execute(command)\n",
        "    return self.cursor.fetchall()"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TZ_Yu8jdqIsR"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}